{"version":3,"sources":["components/Footer.js","components/Note.js","components/Notification.js","services/notes.js","App.js","index.js"],"names":["Footer","style","color","fontStyle","fontSize","Note","note","toggleImportance","label","important","className","content","onClick","Notification","message","baseUrl","axios","get","then","response","data","newObject","post","id","put","App","useState","notes","setNotes","newNote","setNewNote","showAll","setShowAll","errorMessage","setErrorMessage","useEffect","noteService","initialNotes","console","log","length","notesToShow","filter","map","find","n","changedNote","returnedNote","catch","error","setTimeout","toggleImportanceOf","onSubmit","event","preventDefault","noteObject","date","Date","toISOString","Math","random","concat","value","onChange","target","type","ReactDOM","render","document","getElementById"],"mappings":"oLAgBeA,EAhBA,WAMb,OACE,sBAAKC,MANa,CAClBC,MAAO,QACPC,UAAW,SACXC,SAAU,IAGV,UACE,uBACA,2GCISC,EAXF,SAAC,GAAgC,IAA9BC,EAA6B,EAA7BA,KAAMC,EAAuB,EAAvBA,iBACdC,EAAQF,EAAKG,UAAY,qBAAuB,iBAEtD,OACE,qBAAIC,UAAU,OAAd,UACGJ,EAAKK,QACN,wBAAQC,QAASL,EAAjB,SAAoCC,QCD3BK,EAPM,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACtB,OAAgB,OAAZA,EACK,KAEF,qBAAKJ,UAAU,QAAf,SAAwBI,K,gBCA3BC,EAAU,aAiBD,EAfA,WAEb,OADgBC,IAAMC,IAAIF,GACXG,MAAK,SAACC,GAAD,OAAcA,EAASC,SAa9B,EAVA,SAACC,GAEd,OADgBL,IAAMM,KAAKP,EAASM,GACrBH,MAAK,SAACC,GAAD,OAAcA,EAASC,SAQ9B,EALA,SAACG,EAAIF,GAElB,OADgBL,IAAMQ,IAAN,UAAaT,EAAb,YAAwBQ,GAAMF,GAC/BH,MAAK,SAACC,GAAD,OAAcA,EAASC,SCqE9BK,EAjFH,WACV,MAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAA8BF,mBAAS,iBAAvC,mBAAOG,EAAP,KAAgBC,EAAhB,KACA,EAA8BJ,oBAAS,GAAvC,mBAAOK,EAAP,KAAgBC,EAAhB,KACA,EAAwCN,mBAAS,MAAjD,mBAAOO,EAAP,KAAqBC,EAArB,KAEAC,qBAAU,WACRC,IAAqBlB,MAAK,SAACmB,GACzBT,EAASS,QAEV,IACHC,QAAQC,IAAI,SAAUZ,EAAMa,OAAQ,SAEpC,IAuCMC,EAAcV,EAAUJ,EAAQA,EAAMe,QAAO,SAACpC,GAAD,OAAUA,EAAKG,aAElE,OACE,gCACE,uCACCwB,GAAgB,cAAC,EAAD,CAAcnB,QAASmB,IACxC,8BACE,yBAAQrB,QAAS,kBAAMoB,GAAYD,IAAnC,kBACQA,EAAU,YAAc,WAGlC,6BACGU,EAAYE,KAAI,SAACrC,GAAD,OACf,cAAC,EAAD,CAEEA,KAAMA,EACNC,iBAAkB,kBAnCD,SAACgB,GAC1B,IAAMjB,EAAOqB,EAAMiB,MAAK,SAACC,GAAD,OAAOA,EAAEtB,KAAOA,KAClCuB,EAAW,2BAAQxC,GAAR,IAAcG,WAAYH,EAAKG,YAEhD2B,EACUb,EAAIuB,GACX5B,MAAK,SAAC6B,GACLnB,EAASD,EAAMgB,KAAI,SAACrC,GAAD,OAAWA,EAAKiB,KAAOA,EAAKjB,EAAOyC,SAEvDC,OAAM,SAACC,GACNf,EAAgB,SAAD,OACJ5B,EAAKK,QADD,sCAGfuC,YAAW,WACThB,EAAgB,QACf,QAoByBiB,CAAmB7C,EAAKiB,MAF3CjB,EAAKiB,SAMhB,uBAAM6B,SA3DM,SAACC,GACfA,EAAMC,iBACN,IAAMC,EAAa,CACjB5C,QAASkB,EACT2B,MAAM,IAAIC,MAAOC,cACjBjD,UAAWkD,KAAKC,SAAW,IAI7BxB,EAAmBmB,GAAYrC,MAAK,SAAC6B,GACnCnB,EAASD,EAAMkC,OAAOd,IACtBjB,EAAW,QAgDX,UACE,uBAAOgC,MAAOjC,EAASkC,SA7CJ,SAACV,GACxBf,QAAQC,IAAIc,EAAMW,OAAOF,OACzBhC,EAAWuB,EAAMW,OAAOF,UA4CpB,wBAAQG,KAAK,SAAb,qBAEF,cAAC,EAAD,QC7ENC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.183acd3e.chunk.js","sourcesContent":["const Footer = () => {\n  const footerStyle = {\n    color: 'green',\n    fontStyle: 'italic',\n    fontSize: 16,\n  };\n  return (\n    <div style={footerStyle}>\n      <br />\n      <em>\n        Note app, Department of Computer Science, University of Helsinki 2020\n      </em>\n    </div>\n  );\n};\n\nexport default Footer;\n","import React from 'react';\n\nconst Note = ({ note, toggleImportance }) => {\n  const label = note.important ? 'make not important' : 'make important';\n\n  return (\n    <li className='note'>\n      {note.content}\n      <button onClick={toggleImportance}>{label}</button>\n    </li>\n  );\n};\n\nexport default Note;\n","const Notification = ({ message }) => {\n  if (message === null) {\n    return null;\n  }\n  return <div className=\"error\">{message}</div>;\n};\n\nexport default Notification;\n","import axios from 'axios';\n// const baseUrl = 'https://whispering-taiga-47960.herokuapp.com/api/notes';\n\n//URL relativa:\nconst baseUrl = '/api/notes';\n\nconst getAll = () => {\n  const request = axios.get(baseUrl);\n  return request.then((response) => response.data);\n};\n\nconst create = (newObject) => {\n  const request = axios.post(baseUrl, newObject);\n  return request.then((response) => response.data);\n};\n\nconst update = (id, newObject) => {\n  const request = axios.put(`${baseUrl}/${id}`, newObject);\n  return request.then((response) => response.data);\n};\n\nexport default { getAll, create, update };\n","import React, { useState, useEffect } from 'react';\nimport Footer from './components/Footer';\nimport Note from './components/Note';\nimport Notification from './components/Notification';\nimport noteService from './services/notes';\n\nconst App = () => {\n  const [notes, setNotes] = useState([]);\n  const [newNote, setNewNote] = useState('a new note...');\n  const [showAll, setShowAll] = useState(true);\n  const [errorMessage, setErrorMessage] = useState(null);\n\n  useEffect(() => {\n    noteService.getAll().then((initialNotes) => {\n      setNotes(initialNotes);\n    });\n  }, []);\n  console.log('render', notes.length, 'notes');\n\n  const addNote = (event) => {\n    event.preventDefault();\n    const noteObject = {\n      content: newNote,\n      date: new Date().toISOString(),\n      important: Math.random() < 0.5,\n      //      id: notes.length + 1,\n    };\n\n    noteService.create(noteObject).then((returnedNote) => {\n      setNotes(notes.concat(returnedNote));\n      setNewNote('');\n    });\n  };\n\n  const handleNoteChange = (event) => {\n    console.log(event.target.value);\n    setNewNote(event.target.value);\n  };\n\n  const toggleImportanceOf = (id) => {\n    const note = notes.find((n) => n.id === id);\n    const changedNote = { ...note, important: !note.important };\n\n    noteService\n      .update(id, changedNote)\n      .then((returnedNote) => {\n        setNotes(notes.map((note) => (note.id !== id ? note : returnedNote)));\n      })\n      .catch((error) => {\n        setErrorMessage(\n          `Note '${note.content}' was already removed from server`\n        );\n        setTimeout(() => {\n          setErrorMessage(null);\n        }, 5000);\n      });\n  };\n\n  const notesToShow = showAll ? notes : notes.filter((note) => note.important);\n\n  return (\n    <div>\n      <h1>Notes</h1>\n      {errorMessage && <Notification message={errorMessage} />}\n      <div>\n        <button onClick={() => setShowAll(!showAll)}>\n          show {showAll ? 'important' : 'all'}\n        </button>\n      </div>\n      <ul>\n        {notesToShow.map((note) => (\n          <Note\n            key={note.id}\n            note={note}\n            toggleImportance={() => toggleImportanceOf(note.id)}\n          />\n        ))}\n      </ul>\n      <form onSubmit={addNote}>\n        <input value={newNote} onChange={handleNoteChange} />\n        <button type=\"submit\">save</button>\n      </form>\n      <Footer />\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}